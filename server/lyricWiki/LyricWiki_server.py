##################################################
# file: LyricWiki_server.py
#
# skeleton generated by "ZSI.generate.wsdl2dispatch.ServiceModuleWriter"
#      /usr/bin/wsdl2py --complexType http://lyrics.wikia.com/server.php?wsdl
#
##################################################

from ZSI.schema import GED, GTD
from ZSI.TCcompound import ComplexType, Struct
from LyricWiki_types import *
from ZSI.ServiceContainer import ServiceSOAPBinding

# Messages  
_checkSongExistsRequestTypecode = Struct(pname=("urn:LyricWiki","checkSongExists"), ofwhat=[ZSI.TC.String(pname="artist", aname="_artist", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="song", aname="_song", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class checkSongExistsRequest:
    typecode = _checkSongExistsRequestTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        artist -- part artist
        song -- part song
        """
        self._artist =  kw.get("artist")
        self._song =  kw.get("song")
checkSongExistsRequest.typecode.pyclass = checkSongExistsRequest

_checkSongExistsResponseTypecode = Struct(pname=("urn:LyricWiki","checkSongExistsResponse"), ofwhat=[ZSI.TC.Boolean(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class checkSongExistsResponse:
    typecode = _checkSongExistsResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        return -- part return
        """
        self._return =  kw.get("return")
checkSongExistsResponse.typecode.pyclass = checkSongExistsResponse

_searchArtistsRequestTypecode = Struct(pname=("urn:LyricWiki","searchArtists"), ofwhat=[ZSI.TC.String(pname="searchString", aname="_searchString", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class searchArtistsRequest:
    typecode = _searchArtistsRequestTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        searchString -- part searchString
        """
        self._searchString =  kw.get("searchString")
searchArtistsRequest.typecode.pyclass = searchArtistsRequest

_searchArtistsResponseTypecode = Struct(pname=("urn:LyricWiki","searchArtistsResponse"), ofwhat=[ns0.ArrayOfstring_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class searchArtistsResponse:
    typecode = _searchArtistsResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        return -- part return
        """
        self._return =  kw.get("return")
searchArtistsResponse.typecode.pyclass = searchArtistsResponse

_searchAlbumsRequestTypecode = Struct(pname=("urn:LyricWiki","searchAlbums"), ofwhat=[ZSI.TC.String(pname="artist", aname="_artist", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="album", aname="_album", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="year", aname="_year", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class searchAlbumsRequest:
    typecode = _searchAlbumsRequestTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        artist -- part artist
        album -- part album
        year -- part year
        """
        self._artist =  kw.get("artist")
        self._album =  kw.get("album")
        self._year =  kw.get("year")
searchAlbumsRequest.typecode.pyclass = searchAlbumsRequest

_searchAlbumsResponseTypecode = Struct(pname=("urn:LyricWiki","searchAlbumsResponse"), ofwhat=[ns0.AlbumResultArray_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class searchAlbumsResponse:
    typecode = _searchAlbumsResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        return -- part return
        """
        self._return =  kw.get("return")
searchAlbumsResponse.typecode.pyclass = searchAlbumsResponse

_searchSongsRequestTypecode = Struct(pname=("urn:LyricWiki","searchSongs"), ofwhat=[ZSI.TC.String(pname="artist", aname="_artist", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="song", aname="_song", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class searchSongsRequest:
    typecode = _searchSongsRequestTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        artist -- part artist
        song -- part song
        """
        self._artist =  kw.get("artist")
        self._song =  kw.get("song")
searchSongsRequest.typecode.pyclass = searchSongsRequest

_searchSongsResponseTypecode = Struct(pname=("urn:LyricWiki","searchSongsResponse"), ofwhat=[ns0.SongResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class searchSongsResponse:
    typecode = _searchSongsResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        return -- part return
        """
        self._return =  kw.get("return")
searchSongsResponse.typecode.pyclass = searchSongsResponse

_getSOTDRequestTypecode = Struct(pname=("urn:LyricWiki","getSOTD"), ofwhat=[], pyclass=None, encoded="urn:LyricWiki")
class getSOTDRequest:
    typecode = _getSOTDRequestTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        """
getSOTDRequest.typecode.pyclass = getSOTDRequest

_getSOTDResponseTypecode = Struct(pname=("urn:LyricWiki","getSOTDResponse"), ofwhat=[ns0.SOTDResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class getSOTDResponse:
    typecode = _getSOTDResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        return -- part return
        """
        self._return =  kw.get("return")
getSOTDResponse.typecode.pyclass = getSOTDResponse

_getSongRequestTypecode = Struct(pname=("urn:LyricWiki","getSong"), ofwhat=[ZSI.TC.String(pname="artist", aname="_artist", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="song", aname="_song", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class getSongRequest:
    typecode = _getSongRequestTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        artist -- part artist
        song -- part song
        """
        self._artist =  kw.get("artist")
        self._song =  kw.get("song")
getSongRequest.typecode.pyclass = getSongRequest

_getSongResponseTypecode = Struct(pname=("urn:LyricWiki","getSongResponse"), ofwhat=[ns0.LyricsResult_Def(pname="return", aname="_return", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class getSongResponse:
    typecode = _getSongResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        return -- part return
        """
        self._return =  kw.get("return")
getSongResponse.typecode.pyclass = getSongResponse

_getSongResultRequestTypecode = Struct(pname=("urn:LyricWiki","getSongResult"), ofwhat=[ZSI.TC.String(pname="artist", aname="_artist", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="song", aname="_song", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class getSongResultRequest:
    typecode = _getSongResultRequestTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        artist -- part artist
        song -- part song
        """
        self._artist =  kw.get("artist")
        self._song =  kw.get("song")
getSongResultRequest.typecode.pyclass = getSongResultRequest

_getSongResultResponseTypecode = Struct(pname=("urn:LyricWiki","getSongResultResponse"), ofwhat=[ns0.LyricsResult_Def(pname="songResult", aname="_songResult", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class getSongResultResponse:
    typecode = _getSongResultResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        songResult -- part songResult
        """
        self._songResult =  kw.get("songResult")
getSongResultResponse.typecode.pyclass = getSongResultResponse

_getArtistRequestTypecode = Struct(pname=("urn:LyricWiki","getArtist"), ofwhat=[ZSI.TC.String(pname="artist", aname="_artist", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class getArtistRequest:
    typecode = _getArtistRequestTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        artist -- part artist
        """
        self._artist =  kw.get("artist")
getArtistRequest.typecode.pyclass = getArtistRequest

_getArtistResponseTypecode = Struct(pname=("urn:LyricWiki","getArtistResponse"), ofwhat=[ZSI.TC.String(pname="artist", aname="_artist", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.AlbumDataArray_Def(pname="albums", aname="_albums", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class getArtistResponse:
    typecode = _getArtistResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        artist -- part artist
        albums -- part albums
        """
        self._artist =  kw.get("artist")
        self._albums =  kw.get("albums")
getArtistResponse.typecode.pyclass = getArtistResponse

_getAlbumRequestTypecode = Struct(pname=("urn:LyricWiki","getAlbum"), ofwhat=[ZSI.TC.String(pname="artist", aname="_artist", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="album", aname="_album", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="year", aname="_year", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class getAlbumRequest:
    typecode = _getAlbumRequestTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        artist -- part artist
        album -- part album
        year -- part year
        """
        self._artist =  kw.get("artist")
        self._album =  kw.get("album")
        self._year =  kw.get("year")
getAlbumRequest.typecode.pyclass = getAlbumRequest

_getAlbumResponseTypecode = Struct(pname=("urn:LyricWiki","getAlbumResponse"), ofwhat=[ZSI.TC.String(pname="artist", aname="_artist", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="album", aname="_album", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="year", aname="_year", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="amazonLink", aname="_amazonLink", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="imgUrl", aname="_imgUrl", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="url", aname="_url", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.ArrayOfstring_Def(pname="songs", aname="_songs", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class getAlbumResponse:
    typecode = _getAlbumResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        artist -- part artist
        album -- part album
        year -- part year
        amazonLink -- part amazonLink
        imgUrl -- part imgUrl
        url -- part url
        songs -- part songs
        """
        self._artist =  kw.get("artist")
        self._album =  kw.get("album")
        self._year =  kw.get("year")
        self._amazonLink =  kw.get("amazonLink")
        self._imgUrl =  kw.get("imgUrl")
        self._url =  kw.get("url")
        self._songs =  kw.get("songs")
getAlbumResponse.typecode.pyclass = getAlbumResponse

_getHometownRequestTypecode = Struct(pname=("urn:LyricWiki","getHometown"), ofwhat=[ZSI.TC.String(pname="artist", aname="_artist", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class getHometownRequest:
    typecode = _getHometownRequestTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        artist -- part artist
        """
        self._artist =  kw.get("artist")
getHometownRequest.typecode.pyclass = getHometownRequest

_getHometownResponseTypecode = Struct(pname=("urn:LyricWiki","getHometownResponse"), ofwhat=[ZSI.TC.String(pname="country", aname="_country", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="state", aname="_state", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="hometown", aname="_hometown", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class getHometownResponse:
    typecode = _getHometownResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        country -- part country
        state -- part state
        hometown -- part hometown
        """
        self._country =  kw.get("country")
        self._state =  kw.get("state")
        self._hometown =  kw.get("hometown")
getHometownResponse.typecode.pyclass = getHometownResponse

_getTopSongsRequestTypecode = Struct(pname=("urn:LyricWiki","getTopSongs"), ofwhat=[ZSI.TC.String(pname="limit", aname="_limit", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class getTopSongsRequest:
    typecode = _getTopSongsRequestTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        limit -- part limit
        """
        self._limit =  kw.get("limit")
getTopSongsRequest.typecode.pyclass = getTopSongsRequest

_getTopSongsResponseTypecode = Struct(pname=("urn:LyricWiki","getTopSongsResponse"), ofwhat=[ns0.TopSongsArray_Def(pname="topSongs", aname="_topSongs", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class getTopSongsResponse:
    typecode = _getTopSongsResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        topSongs -- part topSongs
        """
        self._topSongs =  kw.get("topSongs")
getTopSongsResponse.typecode.pyclass = getTopSongsResponse

_postArtistRequestTypecode = Struct(pname=("urn:LyricWiki","postArtist"), ofwhat=[ZSI.TC.Boolean(pname="overwriteIfExists", aname="_overwriteIfExists", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="artist", aname="_artist", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.AlbumDataArray_Def(pname="albums", aname="_albums", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class postArtistRequest:
    typecode = _postArtistRequestTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        overwriteIfExists -- part overwriteIfExists
        artist -- part artist
        albums -- part albums
        """
        self._overwriteIfExists =  kw.get("overwriteIfExists")
        self._artist =  kw.get("artist")
        self._albums =  kw.get("albums")
postArtistRequest.typecode.pyclass = postArtistRequest

_postArtistResponseTypecode = Struct(pname=("urn:LyricWiki","postArtistResponse"), ofwhat=[ZSI.TC.String(pname="artist", aname="_artist", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="dataUsed", aname="_dataUsed", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="message", aname="_message", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class postArtistResponse:
    typecode = _postArtistResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        artist -- part artist
        dataUsed -- part dataUsed
        message -- part message
        """
        self._artist =  kw.get("artist")
        self._dataUsed =  kw.get("dataUsed")
        self._message =  kw.get("message")
postArtistResponse.typecode.pyclass = postArtistResponse

_postAlbumRequestTypecode = Struct(pname=("urn:LyricWiki","postAlbum"), ofwhat=[ZSI.TC.Boolean(pname="overwriteIfExists", aname="_overwriteIfExists", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="artist", aname="_artist", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="album", aname="_album", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="year", aname="_year", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="asin", aname="_asin", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.ArrayOfstring_Def(pname="songs", aname="_songs", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class postAlbumRequest:
    typecode = _postAlbumRequestTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        overwriteIfExists -- part overwriteIfExists
        artist -- part artist
        album -- part album
        year -- part year
        asin -- part asin
        songs -- part songs
        """
        self._overwriteIfExists =  kw.get("overwriteIfExists")
        self._artist =  kw.get("artist")
        self._album =  kw.get("album")
        self._year =  kw.get("year")
        self._asin =  kw.get("asin")
        self._songs =  kw.get("songs")
postAlbumRequest.typecode.pyclass = postAlbumRequest

_postAlbumResponseTypecode = Struct(pname=("urn:LyricWiki","postAlbumResponse"), ofwhat=[ZSI.TC.String(pname="artist", aname="_artist", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="album", aname="_album", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TCnumbers.Iint(pname="year", aname="_year", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="dataUsed", aname="_dataUsed", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="message", aname="_message", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class postAlbumResponse:
    typecode = _postAlbumResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        artist -- part artist
        album -- part album
        year -- part year
        dataUsed -- part dataUsed
        message -- part message
        """
        self._artist =  kw.get("artist")
        self._album =  kw.get("album")
        self._year =  kw.get("year")
        self._dataUsed =  kw.get("dataUsed")
        self._message =  kw.get("message")
postAlbumResponse.typecode.pyclass = postAlbumResponse

_postSongRequestTypecode = Struct(pname=("urn:LyricWiki","postSong"), ofwhat=[ZSI.TC.Boolean(pname="overwriteIfExists", aname="_overwriteIfExists", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="artist", aname="_artist", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="song", aname="_song", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="lyrics", aname="_lyrics", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="language", aname="_language", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.AlbumResultArray_Def(pname="onAlbums", aname="_onAlbums", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class postSongRequest:
    typecode = _postSongRequestTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        overwriteIfExists -- part overwriteIfExists
        artist -- part artist
        song -- part song
        lyrics -- part lyrics
        language -- part language
        onAlbums -- part onAlbums
        """
        self._overwriteIfExists =  kw.get("overwriteIfExists")
        self._artist =  kw.get("artist")
        self._song =  kw.get("song")
        self._lyrics =  kw.get("lyrics")
        self._language =  kw.get("language")
        self._onAlbums =  kw.get("onAlbums")
postSongRequest.typecode.pyclass = postSongRequest

_postSongResponseTypecode = Struct(pname=("urn:LyricWiki","postSongResponse"), ofwhat=[ZSI.TC.String(pname="artist", aname="_artist", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="song", aname="_song", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="dataUsed", aname="_dataUsed", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="message", aname="_message", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class postSongResponse:
    typecode = _postSongResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        artist -- part artist
        song -- part song
        dataUsed -- part dataUsed
        message -- part message
        """
        self._artist =  kw.get("artist")
        self._song =  kw.get("song")
        self._dataUsed =  kw.get("dataUsed")
        self._message =  kw.get("message")
postSongResponse.typecode.pyclass = postSongResponse

_postSong_flagsRequestTypecode = Struct(pname=("urn:LyricWiki","postSong_flags"), ofwhat=[ZSI.TC.Boolean(pname="overwriteIfExists", aname="_overwriteIfExists", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="artist", aname="_artist", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="song", aname="_song", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="lyrics", aname="_lyrics", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ns0.AlbumResultArray_Def(pname="onAlbums", aname="_onAlbums", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="flags", aname="_flags", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="language", aname="_language", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class postSong_flagsRequest:
    typecode = _postSong_flagsRequestTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        overwriteIfExists -- part overwriteIfExists
        artist -- part artist
        song -- part song
        lyrics -- part lyrics
        onAlbums -- part onAlbums
        flags -- part flags
        language -- part language
        """
        self._overwriteIfExists =  kw.get("overwriteIfExists")
        self._artist =  kw.get("artist")
        self._song =  kw.get("song")
        self._lyrics =  kw.get("lyrics")
        self._onAlbums =  kw.get("onAlbums")
        self._flags =  kw.get("flags")
        self._language =  kw.get("language")
postSong_flagsRequest.typecode.pyclass = postSong_flagsRequest

_postSong_flagsResponseTypecode = Struct(pname=("urn:LyricWiki","postSong_flagsResponse"), ofwhat=[ZSI.TC.String(pname="artist", aname="_artist", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="song", aname="_song", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.Boolean(pname="dataUsed", aname="_dataUsed", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True), ZSI.TC.String(pname="message", aname="_message", typed=False, encoded=None, minOccurs=1, maxOccurs=1, nillable=True)], pyclass=None, encoded="urn:LyricWiki")
class postSong_flagsResponse:
    typecode = _postSong_flagsResponseTypecode
    __metaclass__ = pyclass_type
    def __init__(self, **kw):
        """Keyword parameters:
        artist -- part artist
        song -- part song
        dataUsed -- part dataUsed
        message -- part message
        """
        self._artist =  kw.get("artist")
        self._song =  kw.get("song")
        self._dataUsed =  kw.get("dataUsed")
        self._message =  kw.get("message")
postSong_flagsResponse.typecode.pyclass = postSong_flagsResponse


# Service Skeletons
class LyricWiki(ServiceSOAPBinding):
    soapAction = {}
    root = {}

    def __init__(self, post='/server.php', **kw):
        ServiceSOAPBinding.__init__(self, post)

    def soap_checkSongExists(self, ps, **kw):
        request = ps.Parse(checkSongExistsRequest.typecode)
        return request,checkSongExistsResponse()

    soapAction['urn:LyricWiki#checkSongExists'] = 'soap_checkSongExists'
    root[(checkSongExistsRequest.typecode.nspname,checkSongExistsRequest.typecode.pname)] = 'soap_checkSongExists'

    def soap_searchArtists(self, ps, **kw):
        request = ps.Parse(searchArtistsRequest.typecode)
        return request,searchArtistsResponse()

    soapAction['urn:LyricWiki#searchArtists'] = 'soap_searchArtists'
    root[(searchArtistsRequest.typecode.nspname,searchArtistsRequest.typecode.pname)] = 'soap_searchArtists'

    def soap_searchAlbums(self, ps, **kw):
        request = ps.Parse(searchAlbumsRequest.typecode)
        return request,searchAlbumsResponse()

    soapAction['urn:LyricWiki#searchAlbums'] = 'soap_searchAlbums'
    root[(searchAlbumsRequest.typecode.nspname,searchAlbumsRequest.typecode.pname)] = 'soap_searchAlbums'

    def soap_searchSongs(self, ps, **kw):
        request = ps.Parse(searchSongsRequest.typecode)
        return request,searchSongsResponse()

    soapAction['urn:LyricWiki#searchSongs'] = 'soap_searchSongs'
    root[(searchSongsRequest.typecode.nspname,searchSongsRequest.typecode.pname)] = 'soap_searchSongs'

    def soap_getSOTD(self, ps, **kw):
        request = ps.Parse(getSOTDRequest.typecode)
        return request,getSOTDResponse()

    soapAction['urn:LyricWiki#getSOTD'] = 'soap_getSOTD'
    root[(getSOTDRequest.typecode.nspname,getSOTDRequest.typecode.pname)] = 'soap_getSOTD'

    def soap_getSong(self, ps, **kw):
        request = ps.Parse(getSongRequest.typecode)
        return request,getSongResponse()

    soapAction['urn:LyricWiki#getSong'] = 'soap_getSong'
    root[(getSongRequest.typecode.nspname,getSongRequest.typecode.pname)] = 'soap_getSong'

    def soap_getSongResult(self, ps, **kw):
        request = ps.Parse(getSongResultRequest.typecode)
        return request,getSongResultResponse()

    soapAction['urn:LyricWiki#getSongResult'] = 'soap_getSongResult'
    root[(getSongResultRequest.typecode.nspname,getSongResultRequest.typecode.pname)] = 'soap_getSongResult'

    def soap_getArtist(self, ps, **kw):
        request = ps.Parse(getArtistRequest.typecode)
        return request,getArtistResponse()

    soapAction['urn:LyricWiki#getArtist'] = 'soap_getArtist'
    root[(getArtistRequest.typecode.nspname,getArtistRequest.typecode.pname)] = 'soap_getArtist'

    def soap_getAlbum(self, ps, **kw):
        request = ps.Parse(getAlbumRequest.typecode)
        return request,getAlbumResponse()

    soapAction['urn:LyricWiki#getAlbum'] = 'soap_getAlbum'
    root[(getAlbumRequest.typecode.nspname,getAlbumRequest.typecode.pname)] = 'soap_getAlbum'

    def soap_getHometown(self, ps, **kw):
        request = ps.Parse(getHometownRequest.typecode)
        return request,getHometownResponse()

    soapAction['urn:LyricWiki#getHometown'] = 'soap_getHometown'
    root[(getHometownRequest.typecode.nspname,getHometownRequest.typecode.pname)] = 'soap_getHometown'

    def soap_getTopSongs(self, ps, **kw):
        request = ps.Parse(getTopSongsRequest.typecode)
        return request,getTopSongsResponse()

    soapAction['urn:LyricWiki#getTopSongs'] = 'soap_getTopSongs'
    root[(getTopSongsRequest.typecode.nspname,getTopSongsRequest.typecode.pname)] = 'soap_getTopSongs'

    def soap_postArtist(self, ps, **kw):
        request = ps.Parse(postArtistRequest.typecode)
        return request,postArtistResponse()

    soapAction['urn:LyricWiki#postArtist'] = 'soap_postArtist'
    root[(postArtistRequest.typecode.nspname,postArtistRequest.typecode.pname)] = 'soap_postArtist'

    def soap_postAlbum(self, ps, **kw):
        request = ps.Parse(postAlbumRequest.typecode)
        return request,postAlbumResponse()

    soapAction['urn:LyricWiki#postAlbum'] = 'soap_postAlbum'
    root[(postAlbumRequest.typecode.nspname,postAlbumRequest.typecode.pname)] = 'soap_postAlbum'

    def soap_postSong(self, ps, **kw):
        request = ps.Parse(postSongRequest.typecode)
        return request,postSongResponse()

    soapAction['urn:LyricWiki#postSong'] = 'soap_postSong'
    root[(postSongRequest.typecode.nspname,postSongRequest.typecode.pname)] = 'soap_postSong'

    def soap_postSong_flags(self, ps, **kw):
        request = ps.Parse(postSong_flagsRequest.typecode)
        return request,postSong_flagsResponse()

    soapAction['urn:LyricWiki#postSong_flags'] = 'soap_postSong_flags'
    root[(postSong_flagsRequest.typecode.nspname,postSong_flagsRequest.typecode.pname)] = 'soap_postSong_flags'

